{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","querySelector"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBXM,GAhBW,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEnC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCHHO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACNxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,IAEIC,EDXwBK,CAAc1B,GAAjCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAEpB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEclBgB,EA7BM,WAAM,MAGazC,mBAAS,CAAC,eAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KASvB,OACI,qCACI,sCACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YClBlC6B,IAASC,OACL,cAAC,EAAD,IAAiBC,SAASC,cAAc,Y","file":"static/js/main.00608475.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CategoryAdd = ( {setCategories} ) => {\n\n    const [InputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const hanldeSubmit = (e) => {\n        e.preventDefault();\n\n        if( InputValue.trim().length > 2 )\n        {\n            setCategories( cats => [InputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ hanldeSubmit }>\n            <input \n                type='text' \n                value={ InputValue } \n                onChange={ handleInputChange } />\n        </form>\n    );\n};\n\nCategoryAdd.propTypes =\n{\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=RbFy0DjZqfSpEZ5FoSbyNdSU0EJj1gB1`;\n    \n    const resp = await fetch(url);\n\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return (gifs);\n}","\nimport React from 'react'\n\nexport const GifGridItem = ( {id,title,url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadein\">\n            <img src={ url } alt={ title }/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p>loading</p> }\n\n            <div className=\"card-grid\">\n            {\n                images.map( img => (\n                    <GifGridItem \n                        key={img.id}\n                        { ...img }\n                    />\n                ))\n            }\n            </div> \n        </>\n    )\n}\n","import { useState , useEffect} from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    useEffect(() => {\n        getGifs( category ).then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        } );\n    }, []);\n\n    return state;\n}\n","import React, { useState } from 'react'\nimport { CategoryAdd } from './components/CategoryAdd';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['bee','rock lee','nightwin']\n    const [categories, setCategories] = useState(['killer bee'])\n\n    // const handleAdd = () => {\n    //     setCategories([...categories,'itachi']);\n    // }\n\n    return (\n        <>\n            <h2>Hola</h2>\n            <CategoryAdd setCategories={ setCategories }/>\n            <hr/> \n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            key={ category } \n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,document.querySelector('#root')\n);\n\n"],"sourceRoot":""}